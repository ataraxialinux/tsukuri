#!/usr/bin/env bash
#
# Copyright (c) 2016-2020 Ataraxia Linux <ataraxialinux@protonmail.com>
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#

umask 0022
unalias -a

pushd() { command pushd "$1" > /dev/null; }
popd() { command popd "$1" > /dev/null; }
msg() { [ "$silent" != "1" ] && printf "\033[1;34m::\033[0m %s\n" "$@"; }
warn() { [ "$silent" != "1" ] && printf "\033[1;33m::\033[0m %s\n" "$@"; }
die() { [ "$silent" != "1" ] && printf "\033[1;31m::\033[0m %s\n" "$@"; rm -rf "$rootdir/.FILES"; exit 1; }

tsukuri_usage() {
cat <<EOF
tsukuri - Simple package manager for Ataraxia Linux

Usage: tsukuri [ACTION] [OPTION...] [PACKAGE...]

Operations:
   build/bi	Compile package from recipe
   emerge/em	Compile and install package file
   info/if	Show information about install package
   install/in	Install binary package file
   list|li	List of all packages
   remove/rm	Remove package from system
   search/sr	Search for package
   upgrade/up	Perform system upgrade
   version	Show version of tsukuri
   help		Show usage information
   -c <FILE>	Specify configuration file
   -r <DIR>	Specify directory for installing packages
   -f		Do force installation/build/removal

Options for installing and removing packages:
   -N		Don't reinstall package
   -B		Don't backup or restore packages
   -D		Don't check for dependencies
   -S		Don't run scripts
   -H		Don't run hooks
   -k		Show number of installed packages

Options for installing and building packages:"
   -e		Don't perform cleanup
   -d		Don't download source
   -v		Don't verify source
   -x		Don't extract sources
   -b		Don't build package
   -p		Don't create package
   -s		Don't sign package

BUG TRACKER: https://github.com/ataraxialinux/neko/issues

EOF

	exit 0
}

tsukuri_version() {
cat <<EOF
tsukuri version $version

Copyright (c) 2016-2021 Ataraxia Linux

This software is licensed under ISC license.
For further information: https://www.isc.org/licenses/

EOF

	exit 0
}

get_filename() {
	local tgt

	if echo "$1" | grep -q -E '^((https|http|ftp|rtsp|mms|file)?:\/\/).+'; then
		if echo $1 | grep -q '::archive='; then
			tgt="$(echo $1 | sed -e 's/::archive=/ /g' | awk '{print $2}')"
		else
			tgt="$(basename $1)"
		fi
		echo "$srcdest/$tgt"
	else
		echo "$1"
	fi
}

parse_numbersign() {
	# $1 - kagamibuild
	# $2 - number sign variable
	[ -z "$1" ] && exit 1
	[ -z "$2" ] && exit 1

	echo "$(grep -w "^# ${2}[[:blank:]]*:" "$1" | sed "s/^# ${2}[[:blank:]]*:[[:blank:]]*//" | tr ',' ' ')"
}

check_root() {
	if [[ $EUID -ne 0 ]]; then
		die "You must be root to run 'tsukuri'"
	fi
}

export_config() {
	[ ! -f "$1" ] && die "Config file is not specified or not found."

	source "$1"

	[ "$BARCH" ] || die "Specify CPU architecture,"
}

export_pkgfile() {
	# Number sign variables:
	#  Description
	#  URL
	#  Maintainer
	#  Section
	#  Depends on
	#  Dep [arch]
	#  Conflicts
	#  Provides
	#  Obsoletes

	[ ! -f "$topdir/KagamiBuild" ] && die "Package recipe not found."

	source "$topdir/KagamiBuild"

	[ -z "$name" ] && die "Package recipe is broken: package name is not specified"
	[ -z "$version" ] && die "Package recipe is broken: package version is not specified"
	[ -z "$release" ] && die "Package recipe is broken: package release is not specified"

	[ -n "$(parse_numbersign $topdir/KagamiBuild "Description")" ] \
		&& description="$(parse_numbersign $topdir/KagamiBuild "Description")"
	[ -n "$(parse_numbersign $topdir/KagamiBuild "URL")" ] \
		&& homepage="$(parse_numbersign $topdir/KagamiBuild "URL")"
	[ -n "$(parse_numbersign $topdir/KagamiBuild "Maintainer")" ] \
		&& maintainer="$(parse_numbersign $topdir/KagamiBuild "Maintainer")"
	[ -n "$(parse_numbersign $topdir/KagamiBuild "Section")" ] \
		&& section="$(parse_numbersign $topdir/KagamiBuild "Section")"
	[ -n "$(parse_numbersign $topdir/KagamiBuild "Depends on")" ] \
		&& depends="$(parse_numbersign $topdir/KagamiBuild "Depends on")"
	[ -n "$(parse_numbersign $topdir/KagamiBuild "Dep $BARCH")" ] \
		&& depends+=" $(parse_numbersign $topdir/KagamiBuild "Dep $BARCH")"
	[ -n "$(parse_numbersign $topdir/KagamiBuild "Conflicts")" ] \
		&& conflicts="$(parse_numbersign $topdir/KagamiBuild "Conflicts")"
	[ -n "$(parse_numbersign $topdir/KagamiBuild "Provides")" ] \
		&& provides="$(parse_numbersign $topdir/KagamiBuild "Provides")"
	[ -n "$(parse_numbersign $topdir/KagamiBuild "Obsoletes")" ] \
		&& obsoletes="$(parse_numbersign $topdir/KagamiBuild "Obsoletes")"
}

parse_options() {
	for myopts in ${buildoptions[@]} ${options[@]}; do
		case $myopts in
			nobootstrap) opt_bootstrap="0" ;;
			~nobootstrap) opt_bootstrap="1" ;;
			nostateless) opt_stateless="0" ;;
			~nostateless) opt_stateless="1" ;;
			ccache) opt_ccache="1" ;;
			~ccache) opt_ccache="0" ;;
			docs) opt_docs="1" ;;
			~docs) opt_docs="0" ;;
			emptydirs) opt_emptydirs="1" ;;
			~emptydirs) opt_emptydirs="0" ;;
			libtool) opt_libtool="1" ;;
			~libtool) opt_libtool="0" ;;
			locales) opt_locales="1" ;;
			~locales) opt_locales="0" ;;
			makeflags) opt_makeflags="1" ;;
			~makeflags) opt_makeflags="0" ;;
			strip) opt_strip="1" ;;
			~strip) opt_strip="0" ;;
		esac
	done
}

gitfetch() {
	local url version autover tgt

	[ -z "$1" ] && exit 1

	if echo $1 | grep -q '::checkout='; then
		url="$(echo $1 | sed 's/::checkout=/ /' | awk '{print $1}')"
		version="$(echo $1 | sed 's/::checkout=/ /' | awk '{print $2}')"
		autover="1"
	else
		url="$f"
		version=""
		autover="0"
	fi

	tgt="$(basename $url)"

	if [ ! -d "$SRC/$tgt" ]; then
		if ! type git &>/dev/null; then
			die 'Cannot download the source tarball, make sure you have `git` installed.'
		fi

		msg "Cloning git repository: $url"
		git clone $gitopts $url "$SRC/$tgt"
		if test $? -ne 0; then
			die  "Failed to clone: $url"
		fi
		if [ "$autover" == "1" ]; then
			msg "Checking out version to $version"
			pushd "$SRC/$tgt"
				git checkout tags/${version} -b branch
			popd
			if test $? -ne 0; then
				die  "Failed to check out version for $url"
			fi
		fi
	fi
}

filefetch() {
	local url archive archive_part

	[ -z "$1" ] && exit 1

	if echo $1 | grep -q '::archive='; then
		url="$(echo $1 | sed 's/::archive=/ /' | awk '{print $1}')"
		archive="$(get_filename $1)"
	else
		url="$1"
		archive="$(get_filename $1)"
	fi

	archive_part="$archive.part"

	if [ ! -f "$archive" ]; then
		if ! type curl &>/dev/null; then
			die 'Cannot download the source tarball, make sure you have `curl` installed.'
		fi

		if [ -f "$archive_part" ]; then
			msg "Resuming download of tarball: $url"
		else
			msg "Downloading tarball: $url"
		fi

		curl $curlopts -C - -f --retry 3 --retry-delay 3 -L -o "$archive_part" $url
		if test $? -ne 0; then
			rm -f "$archive_part"
			die  "Failed to download: $url."
		fi

		if [ -f "$archive_part" ] && [ ! -f "$archive" ]; then
			mv "$archive_part" "$archive"
		fi
	else
		msg "Found pre-downloaded source for $(basename $archive)"
	fi
}

download_sources() {
	local f

	if [ -n "$source" ]; then
		for f in ${source[@]}; do
			if echo "$f" | grep -q -E '^((git)?:\/\/).+'; then
				gitfetch "$f"
			elif echo "$f" | grep -q -E '^((https|http|ftp|rtsp|mms)?:\/\/).+'; then
				filefetch "$f"
			fi
		done
	fi
}

verify_sources() {
	local src filename newsum cursum

	if [ -n "$source" ]; then
		for f in ${source[@]}; do
			if echo "$f" | grep -q -E '^((git)?:\/\/).+'; then
				warn "Skipping checking sums for git repository"
				return 0
			fi

			src="$(get_filename $f)"
			filename="$(basename $src)"

			if [ "$noverify" != "yes" ] && [ -f "$topdir/hashsums" ]; then
				msg "Checking source integrity for $filename"
				cursum="$(cat $topdir/hashsums | grep $filename | awk '{print $1}')"
				newsum="$(b2sum $filename | awk '{print $1}')"

				if [ "$cursum" != "$newsum" ]; then
					[ "$noclean" != "yes" ] && rm -rf "$WORK"
					die "Failed to check source integrity for $filename"
				fi
			fi
		done
	fi
}

extract_sources() {
	local f src filename nxt noext

	if [ -n "$source" ]; then
		for f in ${source[@]}; do
			if echo "$f" | grep -q -E '^((git)?:\/\/).+'; then
				msg "Not extracting git sources for $f"
				return 0
			elif echo "$f" | grep -q -E '^((https|http|ftp|rtsp|mms)?:\/\/).+'; then
				src="$(get_filename $f)"
				filename="$(basename $src)"

				if [ -n "$noextract" ]; then
					for noext in ${noextract[@]}; do
						if [ "$noext" == "$filename" ]; then
							nxt="1"
							break
						fi
					done
				fi

				if [ "$filename" != "$f" ] && [ "$nxt" != 1 ]; then
					case $src in
						*.tar|*.tar.gz|*.tar.Z|*.tgz|*.tar.bz2|*.tbz2|*.tar.xz|*.txz|*.tar.lzma|*.tar.lz|*.tlz|*.tar.lz4|*.tar.zst|*.tar.zstd|*.zip|*.rpm|*.7z)
							msg "Extracting $filename to the sources directory"
							bsdtar -p -o -C "$SRC" -xf $src || die "Failed to extract $filename to the sources directory."
							;;
						*)
							msg "Copying $filename into sources directory"
							cp "$src" "$SRC" || die "Failed to copy $filename into sources directory."
							;;
					esac
				else
					msg "Copying $filename into sources directory"
					cp "$src" "$SRC" || die "Failed to copy $filename into sources directory."
				fi
			else
				src="$(get_filename $f)"

				msg "Copying $(basename $src) into sources directory"
				cp "$src" "$SRC" || die "Failed to copy $(basename $src) into sources directory."
			fi
		done
	fi
}

run_strip() {
	[ -z "$1" ] && exit 1

	( cd "$1"
		find . | xargs file | grep "executable" | grep ELF | cut -f 1 -d : | xargs ${CROSS_COMPILE}strip --strip-all 2>/dev/null
		find . | xargs file | grep "shared object" | grep ELF | cut -f 1 -d : | xargs ${CROSS_COMPILE}strip --strip-unneeded 2>/dev/null
		find . | xargs file | grep "current ar archive" | cut -f 1 -d : | xargs ${CROSS_COMPILE}strip --strip-debug 2>/dev/null
	)
}

setup_compiler() {
	if [ -n "$CC" ]; then
		MYCC="$CC"
	else
		MYCC="gcc"
	fi
	if [ -n "$CXX" ]; then
		MYCXX="$CXX"
	else
		MYCXX="g++"
	fi
}

all-flag-vars() {
	echo {ADA,C,CPP,CXX,CCAS,F,FC,LD}FLAGS
}

_filter-var() {
	local f x var=$1 new=()
	shift

	for f in ${!var} ; do
		for x in "$@" ; do
			[[ ${f} == ${x} ]] && continue 2
		done
		new+=( "${f}" )
	done
	export ${var}="${new[*]}"
}


filter-flags() {
	local v
	for v in $(all-flag-vars) ; do
		_filter-var ${v} "$@"
	done
	return 0
}

append-cppflags() {
	[[ $# -eq 0 ]] && return 0
	export CPPFLAGS+=" $*"
	return 0
}

append-cflags() {
	[[ $# -eq 0 ]] && return 0
	export CFLAGS+=" $*"
	return 0
}

append-cxxflags() {
	[[ $# -eq 0 ]] && return 0
	export CXXFLAGS+=" $*"
	return 0
}

append-ldflags() {
	[[ $# -eq 0 ]] && return 0
	local flag
	for flag in "$@"; do
		[[ ${flag} == -l* ]] && \
			eqawarn "Appending a library link instruction (${flag}); libraries to link to should not be passed through LDFLAGS"
	done

	export LDFLAGS="${LDFLAGS} $*"
	return 0
}

append-flags() {
	[[ $# -eq 0 ]] && return 0
	case " $* " in
	*' '-[DIU]*) warn 'please use append-cppflags for preprocessor flags' ;;
	*' '-L*|\
	*' '-Wl,*)  warn 'please use append-ldflags for linker flags' ;;
	esac
	append-cflags "$@"
	append-cxxflags "$@"
	append-fflags "$@"
	return 0
}

replace-flags() {
	[[ $# != 2 ]] && die "Usage: replace-flags <old flag> <new flag>"

	local f var new
	for var in $(all-flag-vars) ; do
		new=()
		for f in ${!var} ; do
			[[ ${f} == ${1} ]] && f=${2}
			new+=( "${f}" )
		done
		export ${var}="${new[*]}"
	done

	return 0
}

build_package() {
	local use_ccache="0"

	[ "$opt_makeflags" != "0" ] && export MAKEFLAGS="$mkopts"

	if [ "$bootstrap" != "yes" ]; then
		if [ "$opt_ccache" != "0" ]; then
			if type ccache &>/dev/null; then
				use_ccache="1"
				if [ -d "/usr/lib64/ccache" ]; then
					ccache_path="/usr/lib64/ccache"
				elif [ -d "/usr/lib64/ccache/bin" ]; then
					ccache_path="/usr/lib64/ccache/bin"
				elif [ -d "/usr/lib/ccache" ]; then
					ccache_path="/usr/lib/ccache"
				elif [ -d "/usr/lib/ccache/bin" ]; then
					ccache_path="/usr/lib/ccache/bin"
				else
					die "ccache compilers not found."
				fi

				if [ -f "$ccache_path/${CC}" ]; then
					MYCC="$ccache_path/${CC}"
				else
					MYCC="$ccache_path/gcc"
				fi
				if [ -f "$ccache_path/${CXX}" ]; then
					MYCXX="$ccache_path/${CXX}"
				else
					MYCXX="$ccache_path/g++"
				fi
			else
				setup_compiler
			fi
		else
			setup_compiler
		fi
	fi

	if type build &>/dev/null; then
		msg "Compiling package"
		pushd "$SRC"
			(
				set -e
				if [ "$bootstrap" != "yes" ]; then
					export CC="$MYCC"
					export CXX="$MYCXX"
				fi
				build
			)
			if test $? -ne 0; then
				[ "$noclean" != "yes" ] && rm -rf "$WORK"
				die  "Failed to compile package: $name"
			fi
		popd
	else
		warn 'This package does not have `build` function. Skipping.'
	fi


	pushd "$PKG"
		mkdir -p "$SRC"/loc "$SRC"/libloc "$SRC"/helploc

		msg "Removing junk from package"
		rm -rf {,usr/}{,local/}{,share/}info/dir usr{,/local}{,/share},opt/*}/info/dir 
		rm -rf {,usr/}{,local/}lib/charset.alias

		find . -name "*.pod" -print0 | xargs -0 rm -rf
		find . -name ".packlist" -print0 | xargs -0 rm -rf

		if [ "$opt_libtool" = "0" ]; then
			msg "Removing libtool files"
			find . -name "*.la" -print0 | xargs -0 rm -rf
		fi

		if [ "$opt_emptydirs" = "0" ]; then
				msg "Removing empty directories"
				find . -maxdepth 3 -type d -exec rmdir {} + 2>/dev/null
		fi

		if [ "$opt_locales" = "0" ]; then
			msg "Removing locales"
			rm -rf {,usr/}{,local/}{,share/,lib/}locale
		fi

		if [ "$opt_docs" = "0" ]; then
			msg "Removing documentation"
			rm -rf {,usr/}{,local/}{,share/}doc usr/{,local/}{,share/}{doc,gtk-doc} opt/*/{doc,gtk-doc}
		fi

		if [ -d "$PKG/usr/share/help" ]; then
			pushd usr/share/help
				mv C "$SRC"/

				rm -rf *

				mv "$SRC"/C .
			popd
		fi

		if [ "$opt_strip" != "0" ]; then
			msg "Removing debug information from binary files"
			run_strip "$PKG"
		fi

		msg "Compressing manual pages"
		find . -type f -path "*/man/man*/*" | while read FILE; do
			if [ "$FILE" = "${FILE%%.gz}" ]; then
				gzip -9 "$FILE"
			fi
		done

		find . -type l -path "*/man/man*/*" | while read FILE; do
			TARGET=`readlink -n "$FILE"`
			TARGET="${TARGET##*/}"
			TARGET="${TARGET%%.gz}.gz"
			rm -f "$FILE"
			FILE="${FILE%%.gz}.gz"
			DIR=`dirname "$FILE"`

			if [ -e "$DIR/$TARGET" ]; then
				ln -sf "$TARGET" "$FILE"
			fi
		done
	popd
}

compress_package() {
	local i maint getdir stateless_file threads

	if [ -n "$(nproc)" ]; then
		threads="-T$(nproc)"
	fi

	pushd "$PKG"
		msg "Generating package metadata"

		[ -n "$maintainer" ]  && maint="$(echo $maintainer | tr -d ',' | awk '{print $1}') <$(echo $maintainer | tr -d ',' | sed 's/^\w*\ *//' | sed 's/ at /@/' | sed 's/ dot /./')>"
		cat > .PKGINFO <<-EOF
			# Generated by tsukuri $tsukuri_version
			# not using fakeroot at all
			pkgname = $name
			pkgver = $version
			pkgrel = $release
			packager = ${maint:-"Unknown"}
			builddate = $(date -u "+%s")
			size = $(du -sk | awk '{print $1 * 1024}')
			arch = $BARCH
		EOF

		[ -n "$description" ] && echo "pkgdesc = $description" >> .PKGINFO
		[ -n "$homepage" ] && echo "url = $homepage" >> .PKGINFO
		[ -n "$section" ]  && echo "section = $section" >> .PKGINFO
		[ -n "$depends" ] && {
			for i in $depends; do
				echo "depend = $i" >> .PKGINFO
			done
		}
		[ -n "$conflicts" ] && {
			for i in $conflicts; do
				echo "conflict = $i" >> .PKGINFO
			done
		}
		[ -n "$provides" ] && {
			for i in $provides; do
				echo "provides = $i" >> .PKGINFO
			done
		}
		[ -n "$obsoletes" ] && {
			for i in $obsoletes; do
				echo "obsoletes = $i" >> .PKGINFO
			done
		}
		[ -n "$backup" ] && {
			for i in ${backup[@]}; do
				[ ! -f "$PKG/$i" ] && die "File called '${i}' does not exist."

				if [ "$opt_stateless" == "1" ]; then
					stateless_file="$(basename $i)"
					getdir="$(echo $i | sed "s/$stateless_file/ $stateless_file/" | sed 's,/[^/]*$,,')"
					
					mkdir -p usr/lib/tmpfiles.d usr/share/factory/$getdir
					mv "$PKG"/$i usr/share/factory/$getdir/$stateless_file

					echo "C /${i}" >> usr/lib/tmpfiles.d/stateless-${name}.conf
				else
					echo "backup = $i" >> .PKGINFO
				fi
			done
		}
		if [ "$opt_stateless" == "1" ]; then
			[ ! -d "$PKG/usr/lib/tmpfiles.d" ] && mkdir -p usr/lib/tmpfiles.d

			[ -n "$makedirs" ] && {
				for i in "${makedirs[@]}"; do
					echo "d ${i}" >> usr/lib/tmpfiles.d/setup-${name}.conf
				done
			}
			[ -n "$makelinks" ] && {
				for i in "${makelinks[@]}"; do
					echo "L ${i}" >> usr/lib/tmpfiles.d/setup-${name}.conf
				done
			}

			rm -rf etc var
		fi

		[ -f "$topdir/install" ] && install -Dm755 "$topdir/install" "$PKG/.INSTALL"
		[ -f "$topdir/trigger" ] && install -Dm644 "$topdir/trigger" "$PKG/usr/lib/tsukuri/triggers/${name}.trigger"

		msg "Compressing package"
		find . | bsdcpio --quiet -H newc -o | zstd $threads -19 > "$tgt"
		if test $? -ne 0; then
			[ "$noclean" != "yes" ] && rm -rf "$WORK"
			die  "Failed to compress package."
		fi

		msg "Package was built successfuly!"
	popd
}

sign_package() {
	:
}

tsukuri_build() {
	export_pkgfile
	parse_options

	[ -z "$pkgdest" ] && pkgdest="$topdir"
	[ -z "$srcdest" ] && srcdest="$topdir"

	export tgt="$pkgdest/${name}-${version}-${release}.czst"

	[ "$force" == "yes" ] && rm -rf "$tgt"

	if [ ! -f "$tgt" ]; then
		msg "Building package: $name"

		WORK="$PWD/work"
		PKG="$WORK/pkg"
		SRC="$WORK/src"

		rm -rf "$WORK"
		mkdir -p "$PKG" "$SRC"

		if [ "$bootstrap" = "yes" ]; then
			if [ "$opt_bootstrap" = "0" ]; then
				die "This package cannot be built in the cross-build environment."
			fi
		fi

		[ "$nodownload" != "yes" ] && download_sources
		[ "$noverify" != "yes" ]&& verify_sources
		[ "$noextract" != "yes" ]  && extract_sources
		[ "$nobuild" != "yes" ] && build_package
		[ "$nopackage" != "yes" ]  && compress_package
		[ "$nosign" != "yes" ]  && sign_package
		[ "$noclean" != "yes" ] && rm -rf "$WORK"
	else
		warn "Package has been built already. Skipping."
	fi
}

is_installed() {
	[ -z "$1" ] && exit 1

	if [ -f "$rootdir/usr/lib/tsukuri/db/$1/pkginfo" ]; then
		return 0
	else
		return 1
	fi
}

is_in_archive() {
	# $1 - archive file
	# $2 - file in archive
	[ -z "$1" ] && exit 1
	[ -z "$2" ] && exit 1

	echo "$(bsdtar -tf "$1" | sed 's|./||' | grep -w "$2")"
}

list_files() {
	# $1 - archive file
	[ -z "$1" ] && exit 1

	echo "$(bsdtar -tf "$1" | sed 's|./||')"
}

archive_file_stdout() {
	# $1 - archive file
	# $2 - file in archive
	[ -z "$1" ] && exit 1
	[ -z "$2" ] && exit 1

	echo "$(bsdtar -Oxf "$1" "$2")"
}

list_subtract() {
	(
		cat "$1" "$2" | sort | uniq -u
		cat "$1"
	) | sort | uniq -d
}

list_uninstall() {
	local f p
	local files=$(sort -r "$1" | sed 's:^:'"${rootdir}/"': ; s:/^[^\.]\./::g; s:/\{2,\}:/:g; s:/\./:/:g')
	if [ -z "$DRYRUN" ] ; then
		echo "$files" | tr '\n' '\0' | xargs -0 rm 2>/dev/null
		echo "$files" | tr '\n' '\0' | xargs -0 rmdir 2>/dev/null
		[ "$2" ] && echo "$files" >> "$2"
	fi
	return 0
}

run_scripts() {
	[ -z "$1" ] && exit 1
	[ -z "$2" ] && exit 1

	chroot "$2" $1
}

run_hooks() {
	local a triggers trigname trigdest trigdestexist trigcmd files

	if [ -f "$rootdir/.FILES" ]; then
		files="$rootdir/.FILES"
	else
		file="$rootdir/usr/lib/tsukuri/db/$1/files"
	fi

	if [ -d "$rootdir/usr/lib/tsukuri/triggers" ]; then
		if [ -n "$(ls "$rootdir/usr/lib/tsukuri/triggers")" ]; then
			for triggers in "$rootdir/usr/lib/tsukuri/triggers/"*.trigger; do
				trigname="$(jq -r '.trigger.name' $triggers)"
				trigdest="$(jq -r '.trigger.directory[]' $triggers)"
				if [ -n "$(cat $triggers | grep -w 'directories_exist')" ]; then
					trigdestexist="$(jq -r '.trigger.directories_exist[]' $triggers)"
				fi
				trigcmd="$(jq -r '.trigger.command' $triggers)"

				if [ -n "$trigname" ] && [ -n "$trigdest" ]; then
					[ -n "$trigdestexist" ] && {
						for a in $trigdestexist; do
							[ ! -d "${rootdir}${a}" ] && return 0
						done
					}
					for a in $trigdest; do
						if [ -f "$rootdir/usr/lib/tsukuri/db/$1/files" ]; then
							grep -q -F "$trigdest" "$files"  && {
								if [ -n "$trigcmd" ]; then
									msg "Running triggers: $trigname"
									run_scripts "$trigcmd" "$rootdir/"
								fi
							}
						fi
					done
				fi
			done
		fi
	fi
}

tsukuri_install() {
	local i pkg name version release update update has_scripts backup obsoletes provides sh

	sh="${SHELL:-"/bin/sh"}"

	if [ -f "$tgt" ]; then
		pkg="$tgt"
	else
		pkg="$1"
	fi

	[ ! -f "$pkg" ] && die "Package was not specified or not found."

	msg "Checking package"
	if ! list_files "$pkg" &>/dev/null; then
		die "The package is broken or it's recognized."
	elif [ -z "$(is_in_archive "$pkg" ".PKGINFO")" ]; then
		die "The package is broken or it's recognized."
	fi

	name="$(archive_file_stdout "$pkg" ".PKGINFO" | grep -w 'pkgname =' | sed 's/pkgname = //')"
	version="$(archive_file_stdout "$pkg" ".PKGINFO" | grep -w 'pkgver =' | sed 's/pkgver = //')"
	release="$(archive_file_stdout "$pkg" ".PKGINFO" | grep -w 'pkgrel =' | sed 's/pkgrel = //')"

	[ -z "$name" ] && die "This package is broken: package name is not set."
	[ -z "$version" ] && die "This package is broken: package version is not set."
	[ -z "$release" ] && die "This package is broken: package release is not set."

	[ "$noscripts" != "yes" ] && {
		[ -n "$(is_in_archive "$pkg" ".INSTALL")" ] && has_scripts="1"
	}

	if is_installed "$name"; then
		msg "Upgrading package: $name"
		send-to-journal "$i: upgrading package"
		update="1"
	else
		msg "Installing package: $name"
		send-to-journal "$i: installing package"
		update="0"
	fi

	if [ "$needed" == "yes" ] && [ "$update" != "0" ]; then
		warn "Package has been already installed"
		return 0
	fi

	trap "" INT

	list_files "$pkg" | sed -e 's/.PKGINFO//' -e 's/.INSTALL//' | sed '/^\s*$/d' >> "$rootdir/.FILES"

	if [ "$force" != "yes" ] && [ "$update" == "0" ]; then
		for i in $(cat "$rootdir/.FILES"); do
			if [ -f "$rootdir/$i" ] || [ -L "$rootdir/$i" ]; then
				die 'File called `'${i}'` exists on filesystem. Aborting.'
			fi
		done
	fi

	[ "$nobackup" != "yes" ] && backup="$(archive_file_stdout "$pkg" ".PKGINFO" | grep -w 'backup =' | sed 's/backup = //' | tr '\n' ' ')"
	[ "$nodepends" != "yes" ] && {
		for i in $(archive_file_stdout "$pkg" ".PKGINFO" | grep -w 'depend =' | sed 's/depend = //' | tr '\n' ' '); do
			if ! is_installed "$i"; then
				die 'This package depends on `'${i}'`'
			fi
		done
		for i in $(archive_file_stdout "$pkg" ".PKGINFO" | grep -w 'conflict =' | sed 's/conflict = //' | tr '\n' ' '); do
			if is_installed "$i"; then
				die 'This package conflicts with `'${i}'`'
			fi
		done
	}

	obsoletes="$(archive_file_stdout "$pkg" ".PKGINFO" | grep -w 'obsoletes =' | sed 's/obsoletes = //' | tr '\n' ' ')"
	[ -n "$obsoletes" ] && {
		for i in $obsoletes; do
			if is_installed "$i"; then
				msg 'Removing old package called `'${i}'`'
				silent="1" tsukuri_remove "$i"
			fi
		done
	}

	[ "$has_scripts" == "1" ] && {
		msg "Running pre-install scripts"
		archive_file_stdout "$pkg" ".INSTALL" >> "$rootdir/.INSTALL"
		run_scripts "$sh /.INSTALL pre-install" "$rootdir/"
	}

	[ -n "$backup" ] && {
		msg "Saving user files for backup"
		for i in $backup; do
			[ -f "$rootdir/$i" ] && mv "$rootdir/$i" "$rootdir/$i.save"
		done
	}

	msg "Extracting package on filesystem"
	pushd "$rootdir/"
		bsdcpio -id < "$pkg"
	popd

	if [ -f "$rootdir/usr/lib/tsukuri/db/$name/files" ]; then
		msg "Removing old files"
		list_subtract "$rootdir/usr/lib/tsukuri/db/$name/files" "$rootdir/.FILES" | list_uninstall - || true
	fi

	[ -n "$backup" ] && {
		msg "Restoring old user files"
		for i in $backup; do
			if [ -f "$rootdir/$i.save" ]; then
				[ -f "$rootdir/$i" ] && mv "$rootdir/$i" "$rootdir/$i.new"
				mv "$rootdir/$i.save" "$rootdir/$i"
			fi
		done
	}

	[ "$has_scripts" == "1" ] && {
		msg "Running post-install scripts"
		[ ! -f "$rootdir/.INSTALL" ] && archive_file_stdout "$pkg" ".INSTALL" >> "$rootdir/.INSTALL"
		run_scripts "$sh /.INSTALL post-install" "$rootdir/"
	}

	[ "$nohooks" != "yes" ] && run_hooks "$name"

	msg "Updating package database"
	[ -f "$rootdir/.FILES" ] && install -Dm644 "$rootdir/.FILES" "$rootdir/usr/lib/tsukuri/db/$name/files"
	[ -f "$rootdir/.INSTALL" ] && install -Dm755 "$rootdir/.INSTALL" "$rootdir/usr/lib/tsukuri/db/$name/install"
	[ -f "$rootdir/usr/lib/tsukuri/db/$name/pkginfo" ] && rm -rf "$rootdir/usr/lib/tsukuri/db/$name/pkginfo"

	archive_file_stdout "$pkg" ".PKGINFO" >> "$rootdir/usr/lib/tsukuri/db/$name/pkginfo"
	rm -rf "$rootdir/.FILES" "$rootdir/.INSTALL" "$rootdir/.PKGINFO"

	provides="$(archive_file_stdout "$pkg" ".PKGINFO" | grep -w 'provides =' | sed 's/provides = //' | tr '\n' ' ')"
	[ -n "$provides" ] && {
		for i in $provides; do
			[ ! -L "$rootdir/usr/lib/tsukuri/db/$i" ] && ln -sf "$name" "$rootdir/usr/lib/tsukuri/db/$i"
		done
	}

	msg "Package installed successfuly"
	send-to-journal "$name: package installing successfuly"
	trap INT
}

tsukuri_remove() {
	local has_scripts has_files backup provides sh

	sh="${SHELL:-"/bin/sh"}"

	[ -z "$1" ] && die "Packages are not specified."

	is_installed $1 || die "Package not installed."

	msg "Removing package: $1"
	send-to-journal "$i: removing package"

	trap "" INT
	provides="$(cat $rootdir/usr/lib/tsukuri/db/$1/pkginfo | grep -w 'provides =' | sed 's/provides = //' | tr '\n' ' ')"

	[ "$nobackup" != "yes" ] && backup="$(cat $rootdir/usr/lib/tsukuri/db/$1/pkginfo | grep -w 'backup =' | sed 's/backup = //' | tr '\n' ' ')"
	[ "$noscripts" != "yes" ] && {
		[ -f "$rootdir/usr/lib/tsukuri/db/$1/install" ] && has_scripts="1"
	}
	[ -f "$rootdir/usr/lib/tsukuri/db/$1/files" ] && has_files="1"

	[ "$has_scripts" == "1" ] && {
		msg "Running pre-remove scripts"
		run_scripts "$sh /.INSTALL pre-remove" "$rootdir/"
	}

	[ -n "$backup" ] && {
		msg "Saving user files for backup"
		for i in $backup; do
			[ -f "$rootdir/$i" ] && mv "$rootdir/$i" "$rootdir/$i.save"
		done
	}

	[ "$has_files" == "1" ] && {
		msg "Removing files"
		local dirlist=`grep '/$' "$rootdir/usr/lib/tsukuri/db/$1/files"`
		local nondir=`grep -v '/$' "$rootdir/usr/lib/tsukuri/db/$1/files"`
		list_uninstall "$rootdir/usr/lib/tsukuri/db/$1/files"
		if [ $? -gt 1 ]; then
			die "Failed to remove package"
		fi
	}

	[ -n "$backup" ] && {
		msg "Restoring old user files"
		for i in $backup; do
			if [ -f "$rootdir/$i.save" ]; then
				mv "$rootdir/$i.save" "$rootdir/$i"
			fi
		done
	}

	[ "$has_scripts" == "1" ] && {
		msg "Running post-remove scripts"
		run_scripts "$sh /.INSTALL post-remove" "$rootdir/"
	}

	[ "$nohooks" != "yes" ] && run_hooks "$1"

	msg "Updating package database"
	rm -rf "$rootdir/usr/lib/tsukuri/db/$1"

	[ -n "$provides" ] && {
		for i in $provides; do
			[ -L "$rootdir/usr/lib/tsukuri/db/$i" ] && rm "$rootdir/usr/lib/tsukuri/db/$i"
		done
	}

	msg "Package removed successfuly"
	send-to-journal "$1: package removed successfuly"
	trap INT
}

get_portdir() {
	local dir i

	[ -z "$1" ] && exit 1

	for i in $repos; do
		if test -f "$i/$1/KagamiBuild"; then
			dir="$i/$1"
			break
		fi
	done

	if [ -n "$dir" ]; then
		echo "$dir"
	else
		if [ "$soft" == "1" ]; then
			return 1
		else
			exit 1
		fi
	fi
}

get_portver() {
	local portdir

	[ -z "$1" ] && exit 1

	portdir="$(get_portdir $1)"
	[ -z "$portdir" ] && exit 1

	local portver="$(grep ^version $portdir/KagamiBuild | sed -e 's/version=//g')"
	local portrel="$(grep ^release $portdir/KagamiBuild | sed -e 's/release=//g')"

	echo "$portver-$portrel"
}

get_instver() {
	[ -z "$1" ] && exit 1

	is_installed $1 || return 1

	local instver="$(grep -w 'pkgver' "$rootdir/usr/lib/tsukuri/db/$1/pkginfo" | sed 's/pkgver = //')"
	local instrel="$(grep -w 'pkgrel' "$rootdir/usr/lib/tsukuri/db/$1/pkginfo" | sed 's/pkgrel = //')"

	echo "$instver-$instrel"
}

get_depends() {
	local privdepends i portdir

	[ "$nodepends" == "yes" ] && return 0

	[ -z "$1" ] && exit 1

	portdir="$(get_portdir $1)"
	[ -z "$portdir" ] && exit 1

	[ -n "$(parse_numbersign $portdir/KagamiBuild "Depends on")" ] \
		&& privdepends="$(parse_numbersign $portdir/KagamiBuild "Depends on")"
	[ -n "$(parse_numbersign $portdir/KagamiBuild "Dep $BARCH")" ] \
		&& privdepends+=" $(parse_numbersign $portdir/KagamiBuild "Dep $BARCH")"

	[ -n "$privdepends" ] && {
		for i in $(echo $privdepends | tr ' ' '\n'); do
			if ! echo $deps | tr ' ' '\n' | grep -qx "$i"; then
				soft="1" get_portdir $i &>/dev/null || die 'Package called `'${i}'` does not exist but required for another package.'
				if [ "$2" != "upgrade" ]; then
					is_installed $i
					if test $? -ne 0; then
						get_depends $i
						if [ -n "$deps" ]; then
							deps="$deps $i"
						else
							deps="$i"
						fi
					fi
				else
					vercmp "$(get_instver $i)" "$(get_portver $i)"
					if test $? = 255; then
						is_installed $i || get_depends $i
						get_depends $i "upgrade"
						if [ -n "$deps" ]; then
							deps="$deps $i"
						else
							deps="$i"
						fi
					fi
				fi
			fi
		done

		[ "$2" == "upgrade" ] && {
			[ -n "$deps" ] && deps="$(echo $deps | tr ' ' '\n' | awk '!x[$0]++' | tr '\n' ' ')"
		}
	}
}

tsukuri_emerge() {
	local array i

	[ -z "$1" ] && die "Packages are not specified."

	for i in "$@"; do
		soft="1" get_portdir $i &>/dev/null || die 'Package called `'${i}'` does not exist but specified to emerge.'
		if [ -n "$array" ]; then
			array="$array $i"
		else
			array="$i"
		fi
	done

	if [ "$(echo $array | wc -w)" -gt "1" ]; then
		msg 'Emerging following packages:'
		echo;
		for i in $array; do
			printf " [\e[0;31mEMERGE\e[0m] $i $(get_portver $i) \n"
		done
		echo; echo
	fi

	msg "Resolving dependencies"
	for i in $array; do
		get_depends $i
		if [ -n "$deps" ]; then
			deps="$deps $i"
		else
			deps="$i"
		fi	
	done

	if [ "$(echo $deps | wc -w)" -gt "1" ]; then
		msg "Overall transaction: "
		for i in $deps; do
			printf " [\e[0;31mEMERGE\e[0m] $i $(get_portver $i) \n"
		done
	fi

	for i in $deps; do
		pushd "$(get_portdir $i)"
			(
				noclean="no" topdir="$PWD" tsukuri_build
				tsukuri_install
			)
			if test $? -ne 0; then
				die  "Failed to emerge package: $i"
			fi
		popd
	done
}

list_packages() {
	echo "$(ls "$rootdir/usr/lib/tsukuri/db")"
}

tsukuri_upgrade() {
	local i array

	msg "Checking for updates"
	for i in $(list_packages); do
		vercmp "$(get_instver $i)" "$(get_portver $i)"
		if test $? = 255; then
			if [ -n "$array" ]; then
				array="$array $i"
			else
				array="$i"
			fi
		fi
	done

	[ -z "$array" ] && {
		warn "No updates found"
		return 0
	}

	send-to-journal "Starting system upgrade"

	msg "Resolving dependencies"
	for i in $array; do
		get_depends $i "upgrade"
		if [ -n "$deps" ]; then
			deps="$deps $i"
		else
			deps="$i"
		fi
	done

	msg "Overall transaction: "
	for i in $deps; do
		get_instver $i &>/dev/null;
		if test $? -ne 0; then
			printf "[\e[0;32mUPGRADE\e[0m] $i to $(get_portver $i) \n"
		else
			printf "[\e[0;32mUPGRADE\e[0m] $i from $(get_instver $i) to $(get_portver $i) \n"
		fi
	done

	for i in $deps; do
		pushd "$(get_portdir $i)"
			(
				noclean="no" topdir="$PWD" tsukuri_build
				force="no" needed="no" tsukuri_install
			)
			if test $? -ne 0; then
				die  "Failed to upgrade package: $i"
			fi
		popd
	done

	msg "System has been upgraded successfuly."
	send-to-journal "System has been upgraded successfuly."
}

tsukuri_info() {
	[ -z "$1" ] && exit 1

	is_installed $1 || die "Package not installed."

	local name="$(grep -w 'pkgname' "$rootdir/usr/lib/tsukuri/db/$1/pkginfo" | sed 's/pkgname = //')"
	local pkgver="$(grep -w 'pkgver' "$rootdir/usr/lib/tsukuri/db/$1/pkginfo" | sed 's/pkgver = //')"
	local pkgrel="$(grep -w 'pkgrel' "$rootdir/usr/lib/tsukuri/db/$1/pkginfo" | sed 's/pkgrel = //')"
	local size="$(grep -w 'size' "$rootdir/usr/lib/tsukuri/db/$1/pkginfo" | sed 's/size = //')"
	local desc="$(grep -w 'pkgdesc' "$rootdir/usr/lib/tsukuri/db/$1/pkginfo" | sed 's/pkgdesc = //')"
	local homepage="$(grep -w 'url' "$rootdir/usr/lib/tsukuri/db/$1/pkginfo" | sed 's/url = //')"
	local section="$(grep -w 'section' "$rootdir/usr/lib/tsukuri/db/$1/pkginfo" | sed 's/section = //')"
	local depends="$(grep -w 'depend' "$rootdir/usr/lib/tsukuri/db/$1/pkginfo" | sed 's/depend = //' | tr '\n' ' ')"
	local conflcits="$(grep -w 'conflict' "$rootdir/usr/lib/tsukuri/db/$1/pkginfo" | sed 's/conflict = //' | tr '\n' ' ')"
	local provides="$(grep -w 'provides' "$rootdir/usr/lib/tsukuri/db/$1/pkginfo" | sed 's/provides = //' | tr '\n' ' ')"
	local obsoletes="$(grep -w 'obsoletes' "$rootdir/usr/lib/tsukuri/db/$1/pkginfo" | sed 's/obsoletes = //' | tr '\n' ' ')"

	echo "Name: $name"
	echo "Version: $pkgver"
	echo "Release: $pkgrel"
	echo "Size: $size"
	[ -n "$desc" ] && echo "Description: $desc"
	[ -n "$homepage" ] && echo "URL: $homepage"
	[ -n "$section" ] && echo "Section: $section"
	[ -n "$depends" ] && echo "Dependencies: $depends"
	[ -n "$conflicts" ] && echo "Conflicts: $conflicts"
	[ -n "$provides" ] && echo "Provides: $provides"
	[ -n "$obsoletes" ] && echo "Obsoletes: $obsoletes"
}

tsukuri_search() {
	local pkg="$1"
	local portdir="$(get_portdir $pkg)"

	if [ -n "$portdir" ]; then
		topdir="$portdir" \
		export_pkgfile

		echo "Name: $name"
		echo "Version: $version"
		echo "Release: $release"
		[ -n "$description" ] && echo "Description: $description"
		[ -n "$section" ] && echo "Section: $section"
		[ -n "$homepage" ] && echo "URL: $homepage"
		[ -n "$depends" ] && echo "Dependencies: $(echo $depends | tr ' ' '\n' | sort | tr '\n' ' ')"
		[ -n "$conflicts" ] && echo "Conflicts: $(echo $conflicts | tr ' ' '\n' | sort | tr '\n' ' ')"
		[ -n "$provides" ] && echo "Provides: $(echo $provides | tr ' ' '\n' | sort | tr '\n' ' ')"
		[ -n "$obsoletes" ] && echo "Obsoletes: $(echo $obsoletes | tr ' ' '\n' | sort | tr '\n' ' ')"
	else
		die "$pkg: package not found"
	fi
}

tsukuri_list() {
	local i

	if [ "$number" == "yes" ]; then
		list_packages | wc -l
	else
		for i in $(list_packages | sort | uniq); do
			echo "$i $(get_instver $i)"
		done
	fi
}

main() {
	local opts tgt array

	export LANG="C"
	export LC_ALL="C"

	tsukuri_version="@VERSION@"
	topdir="$PWD"
	config="/etc/tsukuri/make.conf"
	buildoptions=('emptydirs' 'strip' 'makeflags' 'locales' 'docs' 'ccache' 'libtool' 'nobootstrap' 'nostateless')
	bootstrap="no"
	force="no"
	noclean="no"
	nodownload="no"
	noverify="no"
	noextract="no"
	nobuild="no"
	nopackage="no"
	nosign="no"
	needed="no"
	nobackup="no"
	nodepends="no"
	noscripts="no"
	nohooks="no"
	number="no"

	case "$1" in
		build|bi) shift; mode="tsukuri_build" ;;
		emerge|em) shift; mode="tsukuri_emerge" ;;
		info|if) shift; mode="tsukuri_info" ;;
		install|in) shift; mode="tsukuri_install" ;;
		list|li) shift; mode="tsukuri_list" ;;
		remove|rm) shift; mode="tsukuri_remove" ;;
		search|sr) shift; mode="tsukuri_search" ;;
		upgrade|up) shift; mode="tsukuri_upgrade" ;;
		version) tsukuri_version ;;
		*|help) tsukuri_usage ;;
	esac

	while getopts c:r:wfedvxbpsNBDSHk opts; do
		case $opts in
			c) config="$(realpath $OPTARG)" ;;
			r) rootdir="$(realpath $OPTARG)"; rootdir="${rootdir%/}" ;;
			w) bootstrap="yes" ;;
			f) force="yes" ;;
			e) noclean="yes" ;;
			d) nodownload="yes" ;;
			v) noverify="yes" ;;
			x) noextract="yes" ;;
			b) nobuild="yes" ;;
			p) nopackage="yes" ;;
			s) nosign="yes" ;;
			N) needed="yes" ;;
			B) nobackup="yes" ;;
			D) nodepends="yes" ;;
			S) noscripts="yes" ;;
			H) nohooks="yes" ;;
			k) number="yes" ;;
			\?) tsukuri_usage ;;
		esac
	done
	shift $((OPTIND -1))

	check_root
	export_config "$config"

	[ "$bootstrap" == "yes" ] && USEBOOTSTRAP="yes"

	if [ "$mode" = "tsukuri_upgrade" ] || [ "$mode" = "tsukuri_build" ] || [ "$mode" = "tsukuri_list" ]; then
		$mode
	elif [ "$mode" = "tsukuri_emerge" ]; then
		[ ! -d "$rootdir/usr/lib/tsukuri/db" ] && die "Database not initialized: $rootdir/usr/lib/tsukuri/db: directory does not exist"
		tsukuri_emerge "$@"
	else
		[ ! -d "$rootdir/usr/lib/tsukuri/db" ] && die "Database not initialized: $rootdir/usr/lib/tsukuri/db: directory does not exist"

		for pkg in "$@"; do
			$mode $pkg
		done
	fi
}

main "$@"

exit 0

